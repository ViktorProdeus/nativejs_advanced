{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","onChange","className","map","currency","index","onClick","connector","connect","currencies","dispatch","setCurrencyAmount","ChangeCurrencyFieldAC","setAction","ChangeActionAC","changeCurrency","СhangeCurrentCurrencyAC","props","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","Number","toFixed","action","Lesson1","App","initialState","reducers","combineReducers","state","type","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.917aa7ef.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n};\r\n\r\n// @ts-ignore\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n};\r\n\r\nexport type ChangeAction = {\r\n};\r\n\r\n// @ts-ignore\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n};\r\n\r\n// @ts-ignore\r\nexport const СhangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    СhangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nconst CurrencyEContainer: React.FC<TProps> = props => {\r\n\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        setCurrencyAmount,\r\n        setAction,\r\n        changeCurrency,\r\n    } = props;\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    setCurrencyAmount(value, value);\r\n                } else {\r\n                    setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    setCurrencyAmount(value, value);\r\n                } else {\r\n                    setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n    return {\r\n        currencies: currency.currencies,\r\n        currentCurrency: currency.currentCurrency,\r\n        isBuying: currency.isBuying,\r\n        amountOfBYN: currency.amountOfBYN,\r\n        amountOfCurrency: currency.amountOfCurrency,\r\n    };\r\n};\r\n\r\n// @ts-ignore\r\nconst mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n    return {\r\n        setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n            dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n        },\r\n        setAction(isBuying: boolean) {\r\n            dispatch(ChangeActionAC(isBuying));\r\n        },\r\n        changeCurrency(currency: string) {\r\n            dispatch(СhangeCurrentCurrencyAC(currency));\r\n        },\r\n    };\r\n};\r\n\r\n// @ts-ignore\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(CurrencyEContainer);\r\n\r\n","import React from 'react';\nimport CurrencyExchangeContainer from '../../containers/CurrencyExchangeContainer/CurrencyEContainer'\n\n// Redux\n// https://tproger.ru/translations/redux-for-beginners/\n// https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n// https://xsltdev.ru/react/redux/intro/\n\n// Typescript genetic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\nconst Lesson1: React.FunctionComponent = () => {\n    return (\n        <>\n            <CurrencyExchangeContainer/>\n        </>\n    );\n};\n\nexport default Lesson1;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\n// import './lessons/lesson2/lesson2';\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\n// import Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Lesson1 />\r\n            {/*<Lesson3 />*/}\r\n            {/*<Lesson4 />*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { CurrencyReducersTypes } from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    // @ts-ignore\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}